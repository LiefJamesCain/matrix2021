{"version":3,"sources":["WakandanMatrix.jsx","App.js","reportWebVitals.js","index.js"],"names":["valid_chars","getRandomCharInRange","min","max","Math","floor","random","getRandomChar","charAt","length","generateRandomStream","Array","fill","map","char","getMutatedStream","stream","newStream","i","push","RainStream","props","useState","setStream","topPadding","setTopPadding","intervalDelay","setIntervalDelay","useEffect","setTimeout","useInterval","height","style","fontFamily","color","writingMode","textOrientation","userSelect","whiteSpace","marginTop","marginLeft","marginRight","textShadow","fontSize","index","opacity","undefined","WakandanMatrix","containerRef","useRef","containerSize","setContainerSize","boundingClientRect","current","getBoundingClientRect","width","streamCount","background","position","top","left","bottom","right","overflow","display","flexDirection","justifyContent","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAGMA,EAAW,qEAYXC,EAAuB,SAACC,EAAKC,GAAN,OAC3BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAQA,GAEtCK,EAAgB,kBACpBP,EAAYQ,OAAOJ,KAAKC,MAAMD,KAAKE,SAAWN,EAAYS,UAEtDC,EAAuB,kBAC3B,IAAIC,MAAMV,EAhBY,GACA,KAgBnBW,OACAC,KAAI,SAACC,GAAD,OAAUP,QAEbQ,EAAmB,SAACC,GAExB,IADA,IAAMC,EAAY,GACTC,EAAI,EAAGA,EAAIF,EAAOP,OAAQS,IAC7Bd,KAAKE,SAzBS,IA0BhBW,EAAUE,KAAKZ,KAEfU,EAAUE,KAAKH,EAAOE,IAI1B,OADAD,EAAUE,KAAKZ,KACRU,GAGHG,EAAa,SAACC,GAAW,IAAD,EACAC,mBAASZ,KADT,mBACrBM,EADqB,KACbO,EADa,OAEQD,oBAA0B,GAAjBN,EAAOP,QAFxB,mBAErBe,EAFqB,KAETC,EAFS,OAGcH,mBAAS,MAHvB,mBAGrBI,EAHqB,KAGNC,EAHM,KAkC5B,OA5BAC,qBAAU,WACRC,YAAW,WACTF,EAAiB1B,EAtCL,GACA,QAsCXA,EApCkB,EACA,QAoCpB,IAEH6B,KAAY,WACV,GAAKT,EAAMU,QACNL,EAAL,CAGA,GAAIF,EAAaH,EAAMU,OAAQ,CAC7BR,EAAU,IACV,IAAMN,EAAYP,IAClBa,EAAUN,GACVQ,GAAkC,GAApBR,EAAUR,QACxBkB,EAAiB,MACjBE,YACE,kBAAMF,EAAiB1B,EAtDb,GACA,QAsDVA,EApDiB,EACA,WAsDnBwB,EAAcD,EAAa,IAG7BD,EAAUR,MACTW,GAGD,qBACEM,MAAO,CACLC,WAAY,iBACZC,MAAO,UACPC,YAAa,cACbC,gBAAiB,UACjBC,WAAY,OACZC,WAAY,SACZC,UAAWf,EACXgB,YAAa,GACbC,aAAc,GACdC,WAAY,sCACZC,SAAU,IAZd,SAeG3B,EAAOH,KAAI,SAACC,EAAM8B,GAAP,OACV,mBACEZ,MAAO,CACLO,WAAY,GAEZM,QAASD,EAAQ,EAAI,GAAc,IAARA,EAAe,EAE1CV,MAAOU,IAAU5B,EAAOP,OAAS,EAAI,YAASqC,EAC9CJ,WACEE,IAAU5B,EAAOP,OAAS,EACtB,2CACAqC,GAVV,SAaGhC,UA4CIiC,EArCQ,SAAC1B,GACtB,IAAM2B,EAAeC,iBAAO,MADI,EAEU3B,mBAAS,MAFnB,mBAEzB4B,EAFyB,KAEVC,EAFU,KAIhCvB,qBAAU,WACR,IAAMwB,EAAqBJ,EAAaK,QAAQC,wBAChDH,EAAiB,CACfI,MAAOH,EAAmBG,MAC1BxB,OAAQqB,EAAmBrB,WAE5B,IAEH,IAAMyB,EAAcN,EAAgB9C,KAAKC,MAAM6C,EAAcK,MAAQ,IAAM,EAE3E,OACE,qBACEvB,MAAO,CACLyB,WAAY,QACZC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPC,SAAU,SACVC,QAAS,OACTC,cAAe,MACfC,eAAgB,UAElBC,IAAKnB,EAbP,SAeG,IAAIrC,MAAM6C,GAAa5C,OAAOC,KAAI,SAACC,GAAD,OACjC,cAAC,EAAD,CAAYiB,OAAM,OAAEmB,QAAF,IAAEA,OAAF,EAAEA,EAAenB,e,MCpI5BqC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c3997f9e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport useInterval from '@use-it/interval';\n\nconst valid_chars = `abcdefghijklmnopqrstuvwxyz0123456789$+-*/=\"'#_(),.;:?!\\\\|{}<>[]^~`;\nconst mutation_odds = 0.02;\n\nconst min_stream_size = 15;\nconst max_stream_size = 50;\n\nconst min_delay = 50;\nconst max_delay = 100;\n\nconst min_stream_delay = 0;\nconst max_stream_delay = 8000;\n\nconst getRandomCharInRange = (min, max) =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nconst getRandomChar = () =>\n  valid_chars.charAt(Math.floor(Math.random() * valid_chars.length));\n\nconst generateRandomStream = () =>\n  new Array(getRandomCharInRange(min_stream_size, max_stream_size))\n    .fill()\n    .map((char) => getRandomChar());\n\nconst getMutatedStream = (stream) => {\n  const newStream = [];\n  for (let i = 1; i < stream.length; i++) {\n    if (Math.random() < mutation_odds) {\n      newStream.push(getRandomChar());\n    } else {\n      newStream.push(stream[i]);\n    }\n  }\n  newStream.push(getRandomChar());\n  return newStream;\n};\n\nconst RainStream = (props) => {\n  const [stream, setStream] = useState(generateRandomStream());\n  const [topPadding, setTopPadding] = useState(stream.length * -50);\n  const [intervalDelay, setIntervalDelay] = useState(null);\n\n  // initialize intervalDelay\n  useEffect(() => {\n    setTimeout(() => {\n      setIntervalDelay(getRandomCharInRange(min_delay, max_delay));\n    }, getRandomCharInRange(min_stream_delay, max_stream_delay));\n  }, []);\n\n  useInterval(() => {\n    if (!props.height) return;\n    if (!intervalDelay) return;\n\n    // if stream is off the screen, reset it after timeout\n    if (topPadding > props.height) {\n      setStream([]);\n      const newStream = generateRandomStream();\n      setStream(newStream);\n      setTopPadding(newStream.length * -44);\n      setIntervalDelay(null);\n      setTimeout(\n        () => setIntervalDelay(getRandomCharInRange(min_delay, max_delay)),\n        getRandomCharInRange(min_stream_delay, max_stream_delay)\n      );\n    } else {\n      setTopPadding(topPadding + 44);\n    }\n    // setStream(stream => [...stream.slice(1, stream.length), getRandomChar()]);\n    setStream(getMutatedStream);\n  }, intervalDelay);\n\n  return (\n    <div\n      style={{\n        fontFamily: 'modernWakandan',\n        color: '#664eae',\n        writingMode: 'vertical-rl',\n        textOrientation: 'upright',\n        userSelect: 'none',\n        whiteSpace: 'nowrap',\n        marginTop: topPadding,\n        marginLeft: -15,\n        marginRight: -15,\n        textShadow: '0px 0px 8px rgba(102, 78, 174, 0.8)',\n        fontSize: 42,\n      }}\n    >\n      {stream.map((char, index) => (\n        <a\n          style={{\n            marginTop: -12,\n            // reduce opacity for last few chars\n            opacity: index < 6 ? 0.1 + index * 0.15 : 1,\n            // first char is white\n            color: index === stream.length - 1 ? '#fff' : undefined,\n            textShadow:\n              index === stream.length - 1\n                ? '0px 0px 20px rgba(255, 255, 255, 1)'\n                : undefined,\n          }}\n        >\n          {char}\n        </a>\n      ))}\n    </div>\n  );\n};\n\nconst WakandanMatrix = (props) => {\n  const containerRef = useRef(null);\n  const [containerSize, setContainerSize] = useState(null); // {width, height}\n\n  useEffect(() => {\n    const boundingClientRect = containerRef.current.getBoundingClientRect();\n    setContainerSize({\n      width: boundingClientRect.width,\n      height: boundingClientRect.height,\n    });\n  }, []);\n\n  const streamCount = containerSize ? Math.floor(containerSize.width / 16) : 0;\n\n  return (\n    <div\n      style={{\n        background: 'black',\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        overflow: 'ignore',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n      ref={containerRef}\n    >\n      {new Array(streamCount).fill().map((char) => (\n        <RainStream height={containerSize?.height} />\n      ))}\n    </div>\n  );\n};\n\nexport default WakandanMatrix;\n","import WakandanMatrix from './WakandanMatrix';\nimport './App.css';\n\nfunction App() {\n  return (\n    <WakandanMatrix/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}